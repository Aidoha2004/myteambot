import os
from flask import Flask, request, jsonify
import requests

app = Flask(__name__)
TOKEN = os.getenv("BOT_TOKEN")
BASE_URL = 'https://myteam.mail.ru/bot/v1'
users_state = {}

CITIES = ['–ê—Å—Ç–∞–Ω–∞', '–ê–ª–º–∞—Ç—ã', '–®—ã–º–∫–µ–Ω—Ç']
LECTORS = ['–¢—É—Ä–º–∞–Ω–æ–≤–∞ –î.–ê.', '–°–µ–∫—É–ª–æ–≤–∞ –®.–ë.']
LINKS = {
    '–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–ª–æ–≤': 'https://delicate-klepon-16140e.netlify.app/',
    '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è': 'https://example.com/consultation',
    '–Ø–≤–∫–∞ –Ω–∞ —Å–µ–º–∏–Ω–∞—Ä': 'https://comforting-torrone-5273b1.netlify.app/'
}
OPTIONS = list(LINKS.keys()) + ['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç']

def send_message(chat_id, text, buttons=None):
    url = f'{BASE_URL}/messages/sendText'
    params = {'token': TOKEN}
    data = {'chatId': chat_id, 'text': text}
    if buttons:
        data['inlineKeyboardMarkup'] = {'inlineKeyboard': buttons}
    requests.post(url, params=params, json=data)

def option_buttons(options):
    # Each button in its own row for easy tap
    return [[{'text': opt, 'callbackData': opt}] for opt in options]

def send_options(chat_id):
    send_message(
        chat_id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Astana Orleu.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:",
        buttons=option_buttons(OPTIONS)
    )
    users_state[chat_id] = {'step': 'choose_option'}

def start_report(chat_id):
    users_state[chat_id] = {'step': 'choose_city', 'data': {}}
    send_message(
        chat_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        buttons=option_buttons(CITIES)
    )

@app.route("/", methods=["POST"])
def webhook():
    data = request.json
    message = data.get('message')
    callback = data.get('callbackQuery')
    if message:
        chat_id = message['chat']['chatId']
        text = message.get('text', '').strip()
        process_message(chat_id, text)
    elif callback:
        chat_id = callback['message']['chat']['chatId']
        data_text = callback['data']
        process_message(chat_id, data_text, is_callback=True)
        # Answer callback to remove loading spinner (optional)
        answer_callback(callback['id'])
    return jsonify({"ok": True})

def answer_callback(callback_id):
    url = f'{BASE_URL}/messages/answerCallbackQuery'
    params = {'token': TOKEN}
    data = {'queryId': callback_id}
    requests.post(url, params=params, json=data)

def process_message(chat_id, text, is_callback=False):
    state = users_state.get(chat_id)
    if not state:
        send_options(chat_id)
        return

    step = state['step']
    data = state.get('data', {})

    if step == 'choose_option':
        if text in OPTIONS:
            selected = text
            if selected == '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç':
                start_report(chat_id)
            else:
                send_message(chat_id, f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞: {LINKS[selected]}")
                users_state.pop(chat_id, None)
        else:
            send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", buttons=option_buttons(OPTIONS))

    elif step == 'choose_city':
        if text in CITIES:
            city = text
            data['city'] = city
            state['step'] = 'choose_lector'
            send_message(
                chat_id,
                f"–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {city}\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫—Ç–æ—Ä–∞:",
                buttons=option_buttons(LECTORS)
            )
        else:
            send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", buttons=option_buttons(CITIES))

    elif step == 'choose_lector':
        if text in LECTORS:
            lector = text
            data['lector'] = lector
            state['step'] = 'enter_date'
            send_message(chat_id, f"–í—ã–±—Ä–∞–Ω –ª–µ–∫—Ç–æ—Ä: {lector}\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–µ–º–∏–Ω–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 –º–∞—è):")
        else:
            send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫—Ç–æ—Ä–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", buttons=option_buttons(LECTORS))

    elif step == 'enter_date':
        data['date'] = text.strip()
        state['step'] = 'enter_start_sum'
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è (—Ç–≥):")

    elif step == 'enter_start_sum':
        if text.isdigit():
            data['start_sum'] = int(text)
            data['expenses'] = []
            state['step'] = 'enter_expense'
            send_message(
                chat_id,
                "–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ç—Ä–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–û–ø–∏—Å–∞–Ω–∏–µ: —Å—É–º–º–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n–¢–∞–∫—Å–∏ –¥–æ –∑–∞–ª–∞: 960\n–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ '–≥–æ—Ç–æ–≤–æ'"
            )
        else:
            send_message(chat_id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")

    elif step == 'enter_expense':
        if text.lower() == '–≥–æ—Ç–æ–≤–æ':
            total_expenses = sum(e[1] for e in data['expenses'])
            remainder = data['start_sum'] - total_expenses
            report_lines = [
                f"–≥. {data['city']}",
                f"–õ–µ–∫—Ç–æ—Ä: {data['lector']}",
                f"{data['date']}\n",
                f"–°—É–º–º–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è:\n{data['start_sum']} —Ç–≥\n",
                "–ó–∞—Ç—Ä–∞—Ç—ã:"
            ]
            for desc, amount in data['expenses']:
                report_lines.append(f"{desc}: {amount} —Ç–≥")
            report_lines.append(f"\n–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥—ã: {total_expenses} —Ç–≥")
            report_lines.append(f"–°—É–º–º–∞ –æ—Å—Ç–∞—Ç–∫–∞: {remainder} —Ç–≥")
            send_message(chat_id, '\n'.join(report_lines))
            users_state.pop(chat_id)
        else:
            if ':' in text:
                parts = text.split(':', 1)
                desc = parts[0].strip()
                amount_str = parts[1].strip().replace('—Ç–≥', '').strip()
                if amount_str.isdigit():
                    amount = int(amount_str)
                    data['expenses'].append((desc, amount))
                    send_message(chat_id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {desc} ‚Äî {amount} —Ç–≥\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∑–∞—Ç—Ä–∞—Ç—É –∏–ª–∏ '–≥–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
                else:
                    send_message(chat_id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            else:
                send_message(chat_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–û–ø–∏—Å–∞–Ω–∏–µ: —Å—É–º–º–∞'.")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
